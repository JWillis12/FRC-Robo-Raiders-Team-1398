// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc1398.RoboRaiderStarterCode;

import org.usfirst.frc1398.RoboRaiderStarterCode.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.*;
import org.usfirst.frc1398.RoboRaiderStarterCode.subsystems.*;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.

    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:

    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());

    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());

    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public Joystick joystick1;
    public JoystickButton raiseArmButton;
    public JoystickButton lowerArmButton;
    public JoystickButton firstLevelIntakeButton;
    public JoystickButton secondLevelShooterButton;
    public JoystickButton thirdLevelShooterButton;
    public Joystick joystick2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        joystick2 = new Joystick(2);
        
        thirdLevelShooterButton = new JoystickButton(joystick2, 5);
        thirdLevelShooterButton.whileHeld(new thirdLevelShooter());
        secondLevelShooterButton = new JoystickButton(joystick2, 4);
        secondLevelShooterButton.whileHeld(new secondLevelShooter());
        firstLevelIntakeButton = new JoystickButton(joystick2, 3);
        firstLevelIntakeButton.whileHeld(new firstLevelIntake());
        lowerArmButton = new JoystickButton(joystick2, 2);
        lowerArmButton.whileHeld(new lowerArm());
        raiseArmButton = new JoystickButton(joystick2, 1);
        raiseArmButton.whileHeld(new raiseArm());
        joystick1 = new Joystick(1);
        


        // SmartDashboard Buttons
        SmartDashboard.putData("autonomousCommand", new autonomousCommand());
        SmartDashboard.putData("raiseArm", new raiseArm());
        SmartDashboard.putData("lowerArm", new lowerArm());
        SmartDashboard.putData("firstLevelIntake", new firstLevelIntake());
        SmartDashboard.putData("secondLevelShooter", new secondLevelShooter());
        SmartDashboard.putData("thirdLevelShooter", new thirdLevelShooter());

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getJoystick1() {
        return joystick1;
    }

    public Joystick getJoystick2() {
        return joystick2;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

